// –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import { test, expect } from "@playwright/test";
import fs from "fs";
import path from "path";
import fetch from "node-fetch"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fetch (–µ—Å–ª–∏ Node.js < 17.5)
import dotenv from "dotenv"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dotenv –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
dotenv.config();

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤
test("check for diamonds with incorrect prices", async ({ page }) => {
  await page.goto("https://www.luvansh.com/shop-diamond");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
  await expect(page).toHaveTitle(/Shop Lab Diamonds/);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∫–∞–º–Ω–µ–π –≤ 2 –∫–∞—Ä–∞—Ç–∞
  const caratBar = await page.locator("#txtminWeight");
  if (await caratBar.isVisible()) {
    await caratBar.fill("2");
    console.log("üòä Stones weight is now 2 carats and more");
  } else {
    throw new Error("üíÄ Carat bar is not found!");
  }

  // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤
  const diamondRows = await page.locator(".diamond-row"); // –ö–ª–∞—Å—Å —Å—Ç—Ä–æ–∫ —Å–ø–∏—Å–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)
  const diamondCount = await diamondRows.count();

  console.log(`üîç Found ${diamondCount} diamonds in the list.`);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
  const priceThreshold = 10; // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ –Ω–∏–∂–µ 10$

  for (let i = 0; i < diamondCount; i++) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞
    const priceText = await diamondRows
      .nth(i)
      .locator(".price-column")
      .textContent(); // –ö–æ–ª–æ–Ω–∫–∞ —Ü–µ–Ω—ã
    const link = await diamondRows.nth(i).locator("a").getAttribute("href"); // –°—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç
    const fullLink = `https://www.luvansh.com${link}`; // –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞

    if (priceText) {
      const price = parseFloat(priceText.replace("$", "").trim());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
      if (price < priceThreshold) {
        console.log(
          `‚ùó Found diamond with low price: $${price}, link: ${fullLink}`
        );

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
        fs.appendFileSync(
          path.resolve(__dirname, "low_price_diamonds.txt"),
          `Price: $${price}, Link: ${fullLink}\n`
        );

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        await sendTelegramNotification(price, fullLink);
      }
    }
  }

  console.log("‚úÖ Test completed");
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
async function sendTelegramNotification(price, link) {
  const botToken = process.env.BOT_TOKEN; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
  const chatId = process.env.CHAT_ID; // chatId, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const message = `‚ö†Ô∏è Diamond found with price $${price}! Check it out: ${link}`;

  const response = await fetch(
    `https://api.telegram.org/bot${botToken}/sendMessage`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId, // –î–æ–±–∞–≤–∏–ª–∏ chatId –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        text: message,
      }),
    }
  );

  if (!response.ok) {
    throw new Error(`Failed to send Telegram message: ${response.statusText}`);
  }
}
